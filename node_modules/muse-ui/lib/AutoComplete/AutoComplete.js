'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _input = require('../internal/mixins/input');

var _input2 = _interopRequireDefault(_input);

var _clickOutside = require('../internal/directives/click-outside');

var _clickOutside2 = _interopRequireDefault(_clickOutside);

var _Popover = require('../Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _List = require('../List');

var _keycode = require('keycode');

var _keycode2 = _interopRequireDefault(_keycode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'mu-auto-complete',
  mixins: [_input2.default],
  directives: {
    'click-outside': _clickOutside2.default
  },
  props: {
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    maxHeight: {
      type: [String, Number],
      default: 300
    },
    maxSearchResults: {
      type: Number,
      default: 0
    },
    openOnFocus: Boolean,
    dense: {
      type: Boolean,
      default: true
    },
    textline: _List.List.props.textline,
    avatar: Boolean
  },
  data: function data() {
    return {
      open: false,
      focusIndex: -1
    };
  },

  computed: {
    enableData: function enableData() {
      var results = [];
      for (var i = 0; i < this.data.length; i++) {
        var value = this.getValueByItem(this.data[i]);
        if (value.toLowerCase().indexOf((this.value || '').toLowerCase()) !== -1) {
          results.push(this.data[i]);
        }
        if (this.maxSearchResults && this.maxSearchResults === results.length) break;
      }
      return results;
    }
  },
  methods: {
    setValue: function setValue(item, e) {
      this.open = false;
      this.focusIndex = -1;
      if (!item) return;
      var value = this.getValueByItem(item);
      this.$emit('input', value, e);
      this.$emit('select', value, item, e);
      this.$emit('change', value, e);
    },
    getValueByItem: function getValueByItem(item) {
      if (!item) return '';
      return typeof item === 'string' ? item : item.value;
    },
    onKeydown: function onKeydown(e) {
      if (this.disabled || this.$attrs.readonly) return;
      var code = (0, _keycode2.default)(e);
      var maxIndex = this.enableData.length - 1;
      var minIndex = 0;
      switch (code) {
        case 'enter':
          if (this.focusIndex === -1) return;
          this.setValue(this.enableData[this.focusIndex], e);
          break;
        case 'up':
          event.preventDefault();
          if (!this.open) return;
          this.focusIndex--;
          if (this.focusIndex < minIndex) this.focusIndex = maxIndex;
          break;
        case 'down':
          event.preventDefault();
          if (!this.open) return;
          this.focusIndex++;
          if (this.focusIndex > maxIndex) this.focusIndex = minIndex;
          break;
        case 'tab':
          this.blur(e);
          break;
        default:
          this.focusIndex = -1;
          break;
      }
      this.$emit('keydown', e);
    },
    onInput: function onInput(e) {
      var val = e.target.value;
      if (val) this.open = true;
      this.$emit('input', val, e);
    },
    focus: function focus(e) {
      this.isFocused = true;
      if (this.openOnFocus) this.open = true;
      this.$emit('focus', e);
    },
    blur: function blur(e) {
      this.isFocused = false;
      this.focusIndex = -1;
      this.open = false;
      this.$emit('blur', e);
    },
    setScollPosition: function setScollPosition(index) {
      var _this = this;

      if (!this.open) return;
      this.$nextTick(function () {
        var popoverEl = _this.$refs.popover.$el;
        var optionEl = popoverEl.querySelector('.is-focused');
        if (!optionEl) return;
        var optionHeight = optionEl.offsetHeight;
        var scrollTop = optionEl.offsetTop - optionHeight;
        if (scrollTop < optionHeight) scrollTop = 0;
        popoverEl.scrollTop = scrollTop;
      });
    },
    createTextField: function createTextField(h) {
      var _this2 = this;

      var listeners = (0, _extends3.default)({}, this.$listeners, {
        input: this.onInput,
        change: function change(e) {
          return _this2.$emit('change', e.target.value, e);
        },
        keydown: this.onKeydown,
        focus: this.focus
      });
      var placeholder = !this.labelFloat ? this.$attrs.placeholder : '';
      return [h('input', {
        staticClass: 'mu-text-field-input',
        ref: 'input',
        attrs: (0, _extends3.default)({
          tabindex: 0
        }, this.$attrs, {
          disabled: this.disabled,
          placeholder: placeholder
        }),
        domProps: {
          value: this.value
        },
        on: listeners
      })];
    },
    createContentList: function createContentList(h) {
      var _this3 = this;

      return h(_List.List, {
        props: {
          dense: this.dense,
          textline: this.textline
        }
      }, this.enableData.map(function (item, index) {
        var highlight = _this3.getHighlight(item);
        return h(_List.ListItem, {
          staticClass: 'mu-option',
          class: {
            'is-focused': _this3.focusIndex === index
          },
          props: {
            button: true,
            avatar: _this3.avatar
          },
          on: {
            click: function click(e) {
              _this3.setValue(item, e);
            }
          }
        }, _this3.$scopedSlots.default ? _this3.$scopedSlots.default({
          item: item,
          highlight: highlight,
          index: index
        }) : [highlight.before, h('span', {
          staticClass: 'mu-secondary-text-color'
        }, highlight.highlight), highlight.after]);
      }));
    },
    getHighlight: function getHighlight(item) {
      var value = this.getValueByItem(item);
      if (!this.value || !this.open) return { before: value, highlight: '', after: '', html: value };
      var index = value.toLowerCase().indexOf(this.value.toLowerCase());
      var before = value.substring(0, index);
      var highlight = value.substring(index, index + this.value.length);
      var after = value.substring(index + this.value.length);
      return {
        before: before,
        highlight: highlight,
        after: after,
        html: [before, '<span class="mu-secondary-text-color">' + highlight + '</span>', after].join('')
      };
    }
  },
  render: function render(h) {
    var _this4 = this;

    var trigger = this.$refs.content;
    return this.createInput(h, {
      staticClass: 'mu-text-field',
      ref: 'content',
      directives: [{
        name: 'click-outside',
        value: function value(e) {
          if (_this4.$refs.popover.$el.contains(e.target)) return;
          _this4.blur(e);
        }
      }]
    }, [this.createTextField(h), this.$slots.default, h(_Popover2.default, {
      staticClass: 'mu-option-list',
      props: {
        trigger: trigger,
        open: this.open
      },
      on: {
        close: function close() {
          return _this4.open = false;
        }
      },
      ref: 'popover',
      style: {
        'maxHeight': this.maxHeight + 'px',
        'height': this.enableData.length === 0 ? 0 : '',
        'min-width': trigger ? trigger.offsetWidth + 'px' : ''
      }
    }, [this.createContentList(h)])]);
  },

  watch: {
    focusIndex: function focusIndex() {
      this.setScollPosition();
    }
  }
};